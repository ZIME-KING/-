; Asm codes generated by Shanghai Haier C Compiler
; HRCO, Ver: 1.0,0133

#INCLUDE       	<ES7P0693.INC>
#INCLUDE       	<OPERATION.INC>
	EXTERN         	MUL_TEMP
	EXTERN         	MUL_TEMP
	PUBLIC         	_Uart_Init
	PUBLIC         	_ADC_init
	PUBLIC         	_Get_ADC_Val
	EXTERN         	_Send_test
	PUBLIC         	_vcc_val
	PUBLIC         	_RV
	PUBLIC         	_RT
	PUBLIC         	_Tmp
	EXTERN         	_Task_1
	EXTERN         	_Task_5
	EXTERN         	_Task_50
	EXTERN         	_Task_100
	EXTERN         	_Task_200
	EXTERN         	_Task_500
	EXTERN         	_Task_1000
	EXTERN         	_SetTime
	EXTERN         	_GetTime
	EXTERN         	_GetTimeDATA
	EXTERN         	_CompareTime
	EXTERN         	_CompareTimeDATA
	EXTERN         	_key_status
	EXTERN         	_key_busy
	EXTERN         	_touch_key_busy
	EXTERN         	_touch_key_staus
	EXTERN         	_scan_touch_key
	EXTERN         	_scan_key
	EXTERN         	_Set_LED
	EXTERN         	_Set_LEDDATA
	EXTERN         	_LED_Clear
	EXTERN         	_Updata_SCAN_LED_BUF_R
	EXTERN         	_D1_NUM
	EXTERN         	_D1_NUMDATA
	EXTERN         	_D2_NUM
	EXTERN         	_D2_NUMDATA
	EXTERN         	_SCAN_NEW
	EXTERN         	_acos
	EXTERN         	_acosDATA
	EXTERN         	_asin
	EXTERN         	_asinDATA
	EXTERN         	_atan2
	EXTERN         	_atan2DATA
	EXTERN         	_atan
	EXTERN         	_atanDATA
	EXTERN         	_ceil
	EXTERN         	_ceilDATA
	EXTERN         	_cos
	EXTERN         	_cosDATA
	EXTERN         	_cosh
	EXTERN         	_coshDATA
	EXTERN         	_eval_poly
	EXTERN         	_eval_polyDATA
	EXTERN         	_exp
	EXTERN         	_expDATA
	EXTERN         	_fabs
	EXTERN         	_fabsDATA
	EXTERN         	_floor
	EXTERN         	_floorDATA
	EXTERN         	_frexp
	EXTERN         	_frexpDATA
	EXTERN         	_ldexp
	EXTERN         	_ldexpDATA
	EXTERN         	_log10
	EXTERN         	_log10DATA
	EXTERN         	_log
	EXTERN         	_logDATA
	EXTERN         	_pow
	EXTERN         	_powDATA
	EXTERN         	_sin
	EXTERN         	_sinDATA
	EXTERN         	_sinh
	EXTERN         	_sinhDATA
	EXTERN         	_sqrt
	EXTERN         	_sqrtDATA
	EXTERN         	_tan
	EXTERN         	_tanDATA
	EXTERN         	_tanh
	EXTERN         	_tanhDATA
	EXTERN         	_Get_Sys_time
	EXTERN         	_display_buf
	EXTERN         	_buzzer_flag
	EXTERN         	_temperature
	EXTERN         	_Vbat_val
	PUBLIC         	_adc_value
	PUBLIC         	_offset_value
	PUBLIC         	_str
	PUBLIC         	_Get_Tempture
	PUBLIC         	_Get_TemptureDATA
	PUBLIC         	_UART_send
	PUBLIC         	_UART_sendDATA
	PUBLIC         	_ADC_convert
	PUBLIC         	_GetOffset2048
	PUBLIC         	_GetOffsetVDD
	PUBLIC         	__f
	PUBLIC         	__fDATA
_#S20278C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c	CSEG           
	ADD            	PCRL,	1
_#S20278
	RETIA          	0XFFFFFFCD
	RETIA          	0XFFFFFFA8
	RETIA          	0XFFFFFFB5
	RETIA          	0XFFFFFFC0
	RETIA          	0X20
	RETIA          	0XFFFFFFB5
	RETIA          	0XFFFFFFC4
	RETIA          	0XFFFFFFD7
	RETIA          	0XFFFFFFAA
	RETIA          	0XFFFFFFBB
	RETIA          	0XFFFFFFBB
	RETIA          	0XFFFFFFD6
	RETIA          	0XFFFFFFB5
	RETIA          	0XFFFFFFCE
	RETIA          	0XFFFFFFAA
	RETIA          	0X3A
	RETIA          	0X20
	RETIA          	0X20
	RETIA          	0X20
	RETIA          	0X20
	RETIA          	0XD
	RETIA          	0XA
	RETIA          	0X0
_Get_Tempture_#T20294_40	EQU            	_Get_TemptureDATA + 0X2		; Bank 0
_Get_Tempture_#T20295_40	EQU            	_Get_TemptureDATA + 0X6		; Bank 0
_Get_Tempture_#T20316_40	EQU            	_Get_TemptureDATA + 0X0		; Bank 0
_Get_Tempture_#T20319_40	EQU            	_Get_TemptureDATA + 0X3		; Bank 0
_Get_Tempture_#T20321_40	EQU            	_Get_TemptureDATA + 0X0		; Bank 0
_Get_Tempture_#T20353_40	EQU            	_Get_TemptureDATA + 0X0		; Bank 0
_Get_Tempture_#T20356_40	EQU            	_Get_TemptureDATA + 0X4		; Bank 0
_Get_Tempture_#T20357_40	EQU            	_Get_TemptureDATA + 0X0		; Bank 0
_Get_Tempture_#T20358_40	EQU            	_Get_TemptureDATA + 0X4		; Bank 0
_ADC_convert_#T20573_45	EQU            	_ADC_convertDATA + 0X0		; Bank 0
_ADC_convert_#T20576_45	EQU            	_ADC_convertDATA + 0X2		; Bank 0
_ADC_convert_#T20579_45	EQU            	_ADC_convertDATA + 0X0		; Bank 0
_ADC_convert_#T20580_45	EQU            	_ADC_convertDATA + 0X4		; Bank 0
_GetOffset2048_value_tmp_47	EQU            	_GetOffset2048DATA + 0X0		; Bank 0
_GetOffset2048_gie_bk_47	EQU            	_GetOffset2048DATA + 0X2		; Bank 0
_GetOffset2048_#T20586_47	EQU            	_GetOffset2048DATA + 0X0		; Bank 0
_GetOffset2048_#T20639_47	EQU            	_GetOffset2048DATA + 0X0		; Bank 0
_GetOffset2048_#T20640_47	EQU            	_GetOffset2048DATA + 0X3		; Bank 0
_GetOffset2048_#T20643_47	EQU            	_GetOffset2048DATA + 0X5		; Bank 0
_ADC_init_j_55	EQU            	_ADC_initDATA + 0X0		; Bank 0
_ADC_init_i_55	EQU            	_ADC_initDATA + 0X2		; Bank 0
_ADC_init_cnt_55	EQU            	_ADC_initDATA + 0X4		; Bank 0
_ADC_init_#T20813_56	EQU            	_ADC_initDATA + 0X5		; Bank 0
_ADC_init_#T20817_56	EQU            	_ADC_initDATA + 0X7		; Bank 0
_ADC_init_#T20818_56	EQU            	_ADC_initDATA + 0X9		; Bank 0
_ADC_init_#T20910_55	EQU            	_ADC_initDATA + 0X4		; Bank 0
_ADC_init_#T20933_55	EQU            	_ADC_initDATA + 0X0		; Bank 0
_Get_ADC_Val_#T21306_66	EQU            	_Get_ADC_ValDATA + 0X0		; Bank 0
_Get_ADC_Val_#T21307_66	EQU            	_Get_ADC_ValDATA + 0X3		; Bank 0
_Get_ADC_Val_#T21326_66	EQU            	_Get_ADC_ValDATA + 0X0		; Bank 0
_Get_ADC_Val_#T21327_66	EQU            	_Get_ADC_ValDATA + 0X4		; Bank 0
_Get_ADC_Val_#T21330_66	EQU            	_Get_ADC_ValDATA + 0X0		; Bank 0
_Get_ADC_Val_#T21337_66	EQU            	_Get_ADC_ValDATA + 0X4		; Bank 0
_Get_ADC_Val_#T21416_66	EQU            	_Get_ADC_ValDATA + 0X0		; Bank 0
#TMP	EQU            	?_TMP+ 0X10		; Bank 0
?_TMP_RET	EQU            	?_TMP		; Bank 0
_ADEN_0#sh	EQU            	0X7D0		; Bank 0
_ADTRG_0#sh	EQU            	0X7D1		; Bank 0
_SMPS_0#sh	EQU            	0X7D2		; Bank 0
_VREFEN_0#sh	EQU            	0X7D8		; Bank 0
_VREF_CHOPEN_0#sh	EQU            	0X7D9		; Bank 0
_TRMT1_0#sh	EQU            	0X6B9		; Bank 0
_BRGH1_0#sh	EQU            	0X6BD		; Bank 0
_TX1LEN_0#sh	EQU            	0X6BE		; Bank 0
_ADCCM_0#sh	EQU            	0XF7		; Bank 0
_ADCRL_0#sh	EQU            	0XF8		; Bank 0
_ADCRH_0#sh	EQU            	0XF9		; Bank 0
_ADCCL_0#sh	EQU            	0XFA		; Bank 0
_ADCCH_0#sh	EQU            	0XFB		; Bank 0
_TX1B_0#sh	EQU            	0XD6		; Bank 0
_BR1R_0#sh	EQU            	0XD8		; Bank 0
_MULA_0#sh	EQU            	(MULA - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULB_0#sh	EQU            	(MULB - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULL_0#sh	EQU            	(MULL - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULH_0#sh	EQU            	(MULH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEL_0#sh	EQU            	(DIVEL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEM_0#sh	EQU            	(DIVEM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSL_0#sh	EQU            	(DIVSL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSH_0#sh	EQU            	(DIVSH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQL_0#sh	EQU            	(DIVQL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQM_0#sh	EQU            	(DIVQM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRL_0#sh	EQU            	(DIVRL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRH_0#sh	EQU            	(DIVRH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVC_0#sh	EQU            	(DIVC - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEU_0#sh	EQU            	(DIVEU - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEH_0#sh	EQU            	(DIVEH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAH_0#sh	EQU            	(FRAH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAL_0#sh	EQU            	(FRAL - 0X6080) % 0X40 + 0xC0		; Bank 0
	_DESC          	Get_Tempture,0X10,0X0,log

SECTION1Get_Tempture	UNINTIAL       	0		; Bank 0
	ORG            	0XBF		; Bank 0
_Get_TemptureDATA	RSEG           	0XA		; Bank 0
Get_Tempture#	CSEG           
_Get_Tempture
; #include "../main.h"
; #include "../inc_user/user_function.h"
; #include <math.h>
; /*********************************************************
; *Copyright (C), 2020, Shanghai Eastsoft Microelectronics Co., Ltd
; *文件名:  adc_offset.c
; *作  者:  AE Team
; *版  本:  v1.0，编译于iDesigner(v4.2.3.166) + 工具链HRCC(v1.2.0.106)
; *日  期:  2020/12/25
; *描  述:  ADC通信演示
;           PA7：模拟输入端口
;           PB5：TX
;           PB6：RX 
;           程序将转换完的AD值通过串口发送到上位机，波特率9600bps。宏定义VDDVREF选择VDD作为参考电压正端，
;           否则选择内部2.048V作为参考电压正端。
; 		  转换值减去offset进行ADC软件补偿，offset为802FH（内部2.048V作参考）和8030H（VDD作参考）低8位数据，
; 		  IAP读16位数据后需先判断是否满足高低8位取反。
; 		  注意：由于offset的存在，为防止溢出，转换值小于offset时，ADC结果直接归0；并且ADC最大只能测到(0xFFF-offset)。
; *备  注:  本软件仅供学习和演示使用，对用户直接引用代码所带来的风险或后果不承担任何法律责任。
; **********************************************************/
; //#define VDDVREF        //宏定义选择VDD作为参考电压，注释本句则选择内部2.048V作为参考电压正端
; typedef unsigned char uchar;
; typedef unsigned int uint;
; uint adc_value;
; uint offset_value = 0;  //保存ADC校准值
; uchar str[] = "通道 的转换值为:    \r\n\0";
; #define B 3950.0//温度系数
; #define TN 298.15//额定温度(绝对温度加常温:273.15+25)
; #define RN 100// 额定阻值(绝对温度时的电阻值10k)
; #define RES 200// 分压电阻200K
; #define BaseVol  2.048 //ADC基准电压
; float vcc_val;
; float RV,RT,Tmp;
; float Get_Tempture(unsigned int adc)
; {        //float RV,RT,Tmp;
#line 41	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;         RV=BaseVol*(float)adc/4096.0;		//ADC为10位ADC,求出NTC电压:RV=ADCValu/1024*BaseVoltag
	CLR            	BKSR
;   41:(    CVUI_D,        adc ,            ,   #T20294)

; ITemplate_LibFunc1
	SECTION        	0x1
	MOV            	(_Get_TemptureDATA+0X0) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP		; Bank 0
	MOV            	(_Get_TemptureDATA+0X0+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x1		; Bank 0
	SEGMENTSEL     	W2DL
	SECTION        	0x0
	CALL           	W2DL		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20294_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20294_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20294_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20294_40+0x3		; Bank 1
;   41:(     MUL_D,    #T20294 ,   2.048000 ,   #T20295)

; ITemplate_LibFunc3
	MOVI           	0x40
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0x3
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0x12
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x6f
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20294_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20294_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20294_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20294_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLMUL
	CALL           	DLMUL		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20295_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20295_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20295_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20295_40+0x3		; Bank 1
;   41:(     DIV_D,    #T20295 , 4096.000000 ,        RV)

; ITemplate_LibFunc3
	MOVI           	0x45
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0x80
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20295_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20295_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20295_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20295_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLDIV
	CALL           	DLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_CVD_F_RET
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RV		; Bank 2
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RV+0x1		; Bank 2
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RV+0x2		; Bank 2
;        // RT=RV*100/(BaseVol-RV);				//求出当前温度阻值 (BaseVoltage-RV)/R16=RV/RT;
#line 43	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		RT=RES/((vcc_val/RV)-1);
;   43:(     DIV_F,    vcc_val ,         RV ,   #T20316)

; ITemplate_LibFunc3
	MOVRA          	_RV+0x2		; Bank 2
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVRA          	_RV+0x1		; Bank 2
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_RV		; Bank 2
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_vcc_val+0x2		; Bank 2
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_vcc_val+0x1		; Bank 2
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_vcc_val		; Bank 2
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	FLDIV
	CALL           	FLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20316_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20316_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20316_40+0x2		; Bank 1
;   43:(     SUB_F,    #T20316 ,   1.000000 ,   #T20319)

; ITemplate_LibFunc3
	MOVI           	0x3f
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x80
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20316_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20316_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20316_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	FLSUB
	CALL           	FLSUB		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20319_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20319_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20319_40+0x2		; Bank 1
;   43:(     DIV_F, 200.000000 ,    #T20319 ,        RT)

; ITemplate_LibFunc3
	MOVRA          	_Get_Tempture_#T20319_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20319_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20319_40		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVI           	0x43
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVI           	0x48
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	FLDIV
	CALL           	FLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RT		; Bank 2
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RT+0x1		; Bank 2
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_RT+0x2		; Bank 2
#line 44	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	    Tmp=1/(1/TN+(log(RT/RN)/B))-273.15;//%RT = RN exp*B(1/T-1/TN)%
;   44:(     DIV_F,         RT , 100.000000 ,   #T20353)

; ITemplate_LibFunc3
	MOVI           	0x42
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0xc8
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_RT+0x2		; Bank 2
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_RT+0x1		; Bank 2
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_RT		; Bank 2
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	FLDIV
	CALL           	FLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_CVF_D_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20353_40+0x1		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20353_40+0x2		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20353_40+0x3		; Bank 1
	SECTION        	0x1
	CLR            	(_Get_Tempture_#T20353_40) & 0X7F		; Bank 1
;   44:(    PARA_4,    #T20353 ,            ,         f)

; ITemplate_ASGN1_4
	MOV            	(_Get_Tempture_#T20353_40) & 0X7F,	0x0		; Bank 1
	MOVA           	(_logDATA+0X0) & 0X7F		; Bank 1
	MOV            	(_Get_Tempture_#T20353_40+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_logDATA+0X0+0x1) & 0X7F		; Bank 1
	MOV            	(_Get_Tempture_#T20353_40+0x2) & 0X7F,	0x0		; Bank 1
	MOVA           	(_logDATA+0X0+0x2) & 0X7F		; Bank 1
	MOV            	(_Get_Tempture_#T20353_40+0x3) & 0X7F,	0x0		; Bank 1
	MOVA           	(_logDATA+0X0+0x3) & 0X7F		; Bank 1
;   44:(     CALLR,    (log.0) ,            ,   #T20321)

; ITemplate_CALL
	SEGMENTSEL     	_log
	CALL           	_log		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_Get_Tempture_#T20321_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20321_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20321_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20321_40+0x3		; Bank 1
;   44:(     DIV_D,    #T20321 , 3950.000000 ,   #T20356)

; ITemplate_LibFunc3
	MOVI           	0x45
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0x76
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0xe0
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20321_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20321_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20321_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20321_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLDIV
	CALL           	DLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20356_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20356_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20356_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20356_40+0x3		; Bank 1
;   44:(     ADD_D,    #T20356 ,   0.003354 ,   #T20357)

; ITemplate_LibFunc3
	MOVI           	0x3b
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0x5b
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0xcf
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0xf
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20356_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20356_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20356_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20356_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLADD
	CALL           	DLADD		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20357_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20357_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20357_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20357_40+0x3		; Bank 1
;   44:(     DIV_D,   1.000000 ,    #T20357 ,   #T20358)

; ITemplate_LibFunc3
	MOVRA          	_Get_Tempture_#T20357_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20357_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20357_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20357_40		; Bank 1
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVI           	0x3f
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVI           	0x80
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLDIV
	CALL           	DLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20358_40		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20358_40+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20358_40+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_Tempture_#T20358_40+0x3		; Bank 1
;   44:(     SUB_D,    #T20358 , 273.149994 ,       Tmp)

; ITemplate_LibFunc3
	MOVI           	0x43
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0x88
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0x93
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x33
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20358_40+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20358_40+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20358_40+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_Tempture_#T20358_40		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLSUB
	CALL           	DLSUB		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_CVD_F_RET
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Tmp		; Bank 2
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Tmp+0x1		; Bank 2
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Tmp+0x2		; Bank 2
#line 45	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;         return Tmp;
;   45:(     RET_3,        Tmp ,            ,      #RET)

; ITemplate_RET2_N
	MOVRA          	_Tmp		; Bank 2
	MOVA           	(?_TMP_RET) & 0X7F		; Bank 0
	MOVRA          	_Tmp+0x1		; Bank 2
	MOVA           	(?_TMP_RET+0x1) & 0X7F		; Bank 0
	MOVRA          	_Tmp+0x2		; Bank 2
	MOVA           	(?_TMP_RET+0x2) & 0X7F		; Bank 0
	MOV            	(?_TMP_RET) & 0X7F,	0x0		; Bank 0
	RET            			; Bank 0		; ShBank 0
	_DESC          	ADC_convert,0X2,0X0

SECTION1ADC_convert	UNINTIAL       	0		; Bank 0
	ORG            	0XBF		; Bank 0
_ADC_convertDATA	RSEG           	0X6		; Bank 0
ADC_convert#	CSEG           
_ADC_convert
; }
; //――――――――――――――――
; //版权声明：本文为CSDN博主「LVGRAPE」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
; //原文链接：https://blog.csdn.net/u013866683/article/details/79391849
; /**********************************************
; 函数名：UART_send(uchar *str,uchar ch,uint value)
; 描  述：UART发送函数
; 输入值：字符串指针，通道数，ADC转换值
; 输出值：无
; 返回值：无
; **********************************************/
; void UART_send(uchar *str,uchar ch,uint value)
; {
;     *(str+4) = ch+'0';
;     *(str+16) = value/1000+'0';
;     *(str+17) = value%1000/100+'0';
;     *(str+18) = value%100/10+'0';
;     *(str+19) = value%10+'0';
;     while(*str)
;     {
;         while(!TRMT1);
;         TX1B = *str++;
;     }
; }
; /**********************************************
; 函数名：ADC_convert(uchar ch)
; 描  述：ADC转换函数
; 输入值：转换通道ch
; 输出值：无
; 返回值：转换的12位结果
; **********************************************/
; uint ADC_convert(void)
; {
#line 84	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ADTRG = 1;      //启动AD转换
	CLR            	BKSR
;   84:(    ASGN_0,          1 ,            ,     ADTRG)

; ITemplate_SET_0_TMP
	BSS            	(_ADTRG_0#sh)/8,	(_ADTRG_0#sh)%8		; ShBank 0
#line 85	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     while(ADTRG);
;   85:(     LABEL,    #L20552 ,            ,          )

; ITemplate_LABEL
#L20552
;   85:(     JNZ_0,      ADTRG ,            ,   #L20552)

; ITemplate_JNZ_0
	JBC            	(_ADTRG_0#sh)/8,	(_ADTRG_0#sh)%8		; ShBank 0
	GOTO           	#L20552
#line 86	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ADIF = 0;
;   86:(    ASGN_0,          0 ,            ,      ADIF)

; ITemplate_CLR_0_TMP
	BCC            	(_ADIF_0)/8,	(_ADIF_0)%8
#line 88	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     return (uint)ADCRH<<8 | ADCRL;
;   88:(   CVUC_UI,      ADCRH ,            ,   #T20573)

; ITemplate_CVTMS_U
	SECTION        	0x1
	CLR            	(_ADC_convert_#T20573_45+0x1) & 0X7F		; Bank 1
	MOV            	_ADCRH_0#sh,	0x0		; ShBank 0
	MOVA           	(_ADC_convert_#T20573_45) & 0X7F		; Bank 1
;   88:(    LSH_2U,    #T20573 ,          8 ,   #T20576)

; ITemplate_LSH1_4_8
	MOV            	(_ADC_convert_#T20573_45) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_convert_#T20576_45+0x1) & 0X7F		; Bank 1
	CLR            	(_ADC_convert_#T20576_45) & 0X7F		; Bank 1
;   88:(   CVUC_UI,      ADCRL ,            ,   #T20579)

; ITemplate_CVTMS_U
	CLR            	(_ADC_convert_#T20579_45+0x1) & 0X7F		; Bank 1
	MOV            	_ADCRL_0#sh,	0x0		; ShBank 0
	MOVA           	(_ADC_convert_#T20579_45) & 0X7F		; Bank 1
;   88:(     BOR_2,    #T20576 ,    #T20579 ,   #T20580)

; ITemplate_BOR1_4
	MOV            	(_ADC_convert_#T20579_45) & 0X7F,	0x0		; Bank 1
	IOR            	(_ADC_convert_#T20576_45) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_convert_#T20580_45) & 0X7F		; Bank 1
	MOV            	(_ADC_convert_#T20579_45+0x1) & 0X7F,	0x0		; Bank 1
	IOR            	(_ADC_convert_#T20576_45+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_convert_#T20580_45+0x1) & 0X7F		; Bank 1
;   88:(     RET_2,    #T20580 ,            ,      #RET)

; ITemplate_RET2_N
	MOV            	(_ADC_convert_#T20580_45) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP_RET		; Bank 0
	MOV            	(_ADC_convert_#T20580_45+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP_RET+0x1		; Bank 0
	MOVRA          	?_TMP_RET		; Bank 0
	SECTION        	0x0
	RET            			; Bank 0		; ShBank 0
	_DESC          	GetOffset2048,0X2,0X0

SECTION1GetOffset2048	UNINTIAL       	0		; Bank 0
	ORG            	0XC2		; Bank 0
_GetOffset2048DATA	RSEG           	0X7		; Bank 0
GetOffset2048#	CSEG           
_GetOffset2048
; }
; /*******************************************************
; 函数名：uint GetOffset2048(void)
; 描  述：获取参考电压为内部2.048V时offset值
; 输入值：无
; 输出值：无
; 返回值：offset值
; *******************************************************/
; uint GetOffset2048(void)
; {
; 	uint value_tmp = 0;
#line 101	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	unsigned char gie_bk = GIE;		//备份GIE
	CLR            	BKSR
;  101:(    CVB_UC,        GIE ,            ,   #T20586)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_GIE_0)/8,	(_GIE_0)%8
	MOVI           	0x1
	SECTION        	0x1
	MOVA           	(_GetOffset2048_#T20586_47) & 0X7F		; Bank 1
;  101:(    ASGN_1,    #T20586 ,            ,    gie_bk)

; ITemplate_ASGN1_4_R
	MOV            	(_GetOffset2048_#T20586_47) & 0X7F,	0x0		; Bank 1
	MOVA           	(_GetOffset2048_gie_bk_47) & 0X7F		; Bank 1
#line 103	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     CLRWDT();
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 105	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	while(GIE) GIE = 0;
;  105:(     LABEL,    #L20587 ,            ,          )

; ITemplate_LABEL
#L20587
;  105:(      JZ_0,        GIE ,            ,   #L20589)

; ITemplate_JZ_0
	JBS            	(_GIE_0)/8,	(_GIE_0)%8
	GOTO           	#L20589
;  105:(    ASGN_0,          0 ,            ,       GIE)

; ITemplate_CLR_0_TMP
	BCC            	(_GIE_0)/8,	(_GIE_0)%8
;  105:(       JMP,            ,            ,   #L20587)

; ITemplate_JMP
	GOTO           	#L20587
;  105:(     LABEL,    #L20589 ,            ,          )

; ITemplate_LABEL
#L20589
#line 106	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	DATARDEN = 1;
;  106:(    ASGN_0,          1 ,            ,  DATARDEN)

; ITemplate_SET_0_TMP
	BSS            	(_DATARDEN_0)/8,	(_DATARDEN_0)%8
#line 108	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	FRAH = 0x802F >> 8;
;  108:(    ASGN_1,        128 ,            ,      FRAH)

; ITemplate_ASGN1_4_R
	MOVI           	0x80
	MOVA           	_FRAH_0
#line 109	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	FRAL = 0x802F;
;  109:(    ASGN_1,         47 ,            ,      FRAL)

; ITemplate_ASGN1_4_R
	MOVI           	0x2f
	MOVA           	_FRAL_0
#line 110	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	DATARDTRG = 1;
;  110:(    ASGN_0,          1 ,            , DATARDTRG)

; ITemplate_SET_0_TMP
	BSS            	(_DATARDTRG_0)/8,	(_DATARDTRG_0)%8
#line 111	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	while(DATARDTRG) ;	     //等待读完成
;  111:(     LABEL,    #L20624 ,            ,          )

; ITemplate_LABEL
#L20624
;  111:(     JNZ_0,  DATARDTRG ,            ,   #L20624)

; ITemplate_JNZ_0
	JBC            	(_DATARDTRG_0)/8,	(_DATARDTRG_0)%8
	GOTO           	#L20624
#line 112	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	__Asm TBR;		         //查表读指令
; ITemplate_LABEL
;-----------Embedded Asm--------------
	TBR
;-------------------------------------
#line 113	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	value_tmp = (ROMDH<<8) | ROMDL;
;  113:(   CVUC_SI,      ROMDH ,            ,   #T20639)

; ITemplate_CVTMS_U
	CLR            	(_GetOffset2048_#T20639_47+0x1) & 0X7F		; Bank 1
	MOV            	_ROMDH_0,	0x0
	MOVA           	(_GetOffset2048_#T20639_47) & 0X7F		; Bank 1
;  113:(    LSH_2S,    #T20639 ,          8 ,   #T20640)

; ITemplate_LSH1_4_8
	MOV            	(_GetOffset2048_#T20639_47) & 0X7F,	0x0		; Bank 1
	MOVA           	(_GetOffset2048_#T20640_47+0x1) & 0X7F		; Bank 1
	CLR            	(_GetOffset2048_#T20640_47) & 0X7F		; Bank 1
;  113:(   CVUC_SI,      ROMDL ,            ,   #T20643)

; ITemplate_CVTMS_U
	CLR            	(_GetOffset2048_#T20643_47+0x1) & 0X7F		; Bank 1
	MOV            	_ROMDL_0,	0x0
	MOVA           	(_GetOffset2048_#T20643_47) & 0X7F		; Bank 1
;  113:(     BOR_2,    #T20640 ,    #T20643 , value_tmp)

; ITemplate_BOR1_4
	MOV            	(_GetOffset2048_#T20643_47) & 0X7F,	0x0		; Bank 1
	IOR            	(_GetOffset2048_#T20640_47) & 0X7F,	0x0		; Bank 1
	MOVA           	(_GetOffset2048_value_tmp_47) & 0X7F		; Bank 1
	MOV            	(_GetOffset2048_#T20643_47+0x1) & 0X7F,	0x0		; Bank 1
	IOR            	(_GetOffset2048_#T20640_47+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_GetOffset2048_value_tmp_47+0x1) & 0X7F		; Bank 1
#line 115	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ROMCL = 0x00;            //退出IAP
;  115:(    ASGN_1,          0 ,            ,     ROMCL)

; ITemplate_CLR1_4_TMP
	CLR            	_ROMCL_0
#line 116	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	GIE = gie_bk;            //恢复全局中断
;  116:(    CVUC_B,     gie_bk ,            ,   #T20657)

; ITemplate_CVUC_B
	SECTION        	0x0
	BCC            	((_GetOffset2048_#T20657_47)/8) & 0X7F,	(_GetOffset2048_#T20657_47)%8		; Bank 0
	SECTION        	0x1
	JBS            	(_GetOffset2048_gie_bk_47) & 0X7F,	0x0		; Bank 1
	GOTO           	#L21429
	SECTION        	0x0
	BSS            	((_GetOffset2048_#T20657_47)/8) & 0X7F,	(_GetOffset2048_#T20657_47)%8		; Bank 0
#L21429
;  116:(    ASGN_0,    #T20657 ,            ,       GIE)

; ITemplate_ASGN_0_P
	SECTION        	0x0
	JBC            	((_GetOffset2048_#T20657_47)/8) & 0X7F,	(_GetOffset2048_#T20657_47)%8		; Bank 0
	GOTO           	#L21430
	BCC            	(_GIE_0)/8,	(_GIE_0)%8
	GOTO           	#L21431
#L21430
	BSS            	(_GIE_0)/8,	(_GIE_0)%8
#L21431
#line 118	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	return value_tmp;
;  118:(     RET_2,  value_tmp ,            ,      #RET)

; ITemplate_RET2_N
	SECTION        	0x1
	MOV            	(_GetOffset2048_value_tmp_47) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP_RET		; Bank 0
	MOV            	(_GetOffset2048_value_tmp_47+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP_RET+0x1		; Bank 0
	MOVRA          	?_TMP_RET		; Bank 0
	SECTION        	0x0
	RET            			; Bank 0		; ShBank 0
	_DESC          	ADC_init,0X3,0X0,GetOffset2048

SECTION1ADC_init	UNINTIAL       	0		; Bank 0
	ORG            	0XB7		; Bank 0
_ADC_initDATA	RSEG           	0XB		; Bank 0
ADC_init#	CSEG           
_ADC_init
; }
; /*******************************************************
; 函数名：uint GetOffsetVDD(void)
; 描  述：获取参考电压为VDD时offset值
; 输入值：无
; 输出值：无
; 返回值：offset值
; *******************************************************/
; uint GetOffsetVDD(void)
; {
; 	uint value_tmp = 0;
; 	unsigned char gie_bk = GIE;		//备份GIE
;     CLRWDT();
; 	while(GIE) GIE = 0;
; 	DATARDEN = 1;
; 	FRAH = 0x8030 >> 8;
; 	FRAL = 0x8030;
; 	DATARDTRG = 1;
; 	while(DATARDTRG) ;	     //等待读完成
; 	__Asm TBR;		         //查表读指令
; 	value_tmp = (ROMDH<<8) | ROMDL;
;     ROMCL = 0x00;            //退出IAP
; 	GIE = gie_bk;            //恢复全局中断
;     return value_tmp;
; }
; /****************初始化UART*******************/
; void Uart_Init(void){
;     //PCT1 = 0;       //TX输出
;     //PAT5 = 1;       //RX输入
;    // PBT5 = 0;       //TX输出
;    // PBT6 = 1;       //RX输入
;     TX1LEN = 0;     //8位数据发送格式 UART1SEL
;     BRGH1 = 0;      //波特率低速模式：波特率=Fosc/(64*(BRR<7:0>+1))
;     BR1R = 25;      //波特率=16MHz/(64*26)≈9600bps
;     
; 	UART1SEL=1;
; }
; /**********************************************
; 函数名：ADC_init()
; 描  述：初始化ADC
; 输入值：无
; 输出值：无
; 返回值：无
; **********************************************/
; void ADC_init(void) 
; {
#line 172	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     uint j = 3000;        //延时变量
	CLR            	BKSR
;  172:(    ASGN_2,       3000 ,            ,         j)

; ITemplate_ASGN1_4_R
	MOVI           	0xb
	SECTION        	0x1
	MOVA           	(_ADC_init_j_55+0x1) & 0X7F		; Bank 1
	MOVI           	0xb8
	MOVA           	(_ADC_init_j_55) & 0X7F		; Bank 1
#line 173	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	uint i = 10000;       //延时变量
;  173:(    ASGN_2,      10000 ,            ,         i)

; ITemplate_ASGN1_4_R
	MOVI           	0x27
	MOVA           	(_ADC_init_i_55+0x1) & 0X7F		; Bank 1
	MOVI           	0x10
	MOVA           	(_ADC_init_i_55) & 0X7F		; Bank 1
#line 174	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	uchar cnt = 3;
;  174:(    ASGN_1,          3 ,            ,       cnt)

; ITemplate_ASGN1_4_R
	MOVI           	0x3
	MOVA           	(_ADC_init_cnt_55) & 0X7F		; Bank 1
;      
; /****************初始化ADC********************/
; #ifdef VDDVREF
; 	while(cnt != 0)
; 	{
;         offset_value = GetOffsetVDD();  //获取offset值
; 		if((offset_value>>8) == ((~offset_value) & 0x00FF)) //是否满足高低8位取反，是则取低8位作为offset
; 		{
; 			offset_value =  offset_value & 0x00FF;
; 			break;
; 		}
; 		else
; 		{
; 		    cnt--;
; 			if(cnt == 0)
; 			    offset_value = 0;  //读IAP超过3次后仍不满足高低8位取反则offset固定为0
; 		}
; 	}
;     ANSL7 = 0;          //选择AIN7为模拟口
;     ADCCL |= 0xF0;      //ADCCL<7:4>选择通道
;     ADCCL &= 0x7F;      //选择通道7
; 	ADCCM = 0x4B;       //参考源VDD,负参考固定选择VSS，转换位数固定选择12位，AD调整offset固定选择档位1
;     ADCCH = 0xC8;       //低位对齐;时钟周期FOSC/16
; 	ADEN = 1;           //使能ADC模块
; #else
#line 202	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	while(cnt != 0)
;  202:(     LABEL,    #L20779 ,            ,          )

; ITemplate_LABEL
#L20779
;  202:(      JZ_1,        cnt ,            ,   #L20781)

; ITemplate_JZ1_4
	MOV            	(_ADC_init_cnt_55) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x2
	GOTO           	#L20781
; 	{
#line 204	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;         offset_value = GetOffset2048();  //获取offset值
;  204:(     CALLR, (GetOffset2048.0) ,            ,offset_value)

; ITemplate_CALL
	SEGMENTSEL     	_GetOffset2048
	CALL           	_GetOffset2048		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_offset_value		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_offset_value+0x1		; Bank 1
#line 205	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		if((offset_value>>8) == ((~offset_value) & 0x00FF)) //是否满足高低八位取反，是则取低8位作为offset
;  205:(    BCOM_2, offset_value ,            ,   #T20813)

; ITemplate_BCOM1_4
	SECTION        	0x1
	COM            	(_offset_value) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20813_56) & 0X7F		; Bank 1
	COM            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20813_56+0x1) & 0X7F		; Bank 1
;  205:(    RSH_2U, offset_value ,          8 ,   #T20817)

; ITemplate_RSH1_4U
	MOVI           	0x8
	ADDI           	0x1
	MOVAR          	?_TMP		; Bank 0
	MOV            	(_offset_value) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x1		; Bank 0
	MOV            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x2		; Bank 0
	MOVRA          	?_TMP		; Bank 0
	GOTO           	#L21432
#L21433
	BCC            	PSW,	0x0
	SECTION        	0x0
	RR             	(?_TMP+0x2) & 0X7F,	0x1		; Bank 0
	RR             	(?_TMP+0x1) & 0X7F,	0x1		; Bank 0
#L21432
	ADDI           	0xff
	JBS            	PSW,	0x2
	GOTO           	#L21433
	SECTION        	0x0
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_ADC_init_#T20817_56		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_ADC_init_#T20817_56+0x1		; Bank 1
;  205:(    BAND_2,        255 ,    #T20813 ,   #T20818)

; ITemplate_BAND1_4
	MOVRA          	_ADC_init_#T20813_56		; Bank 1
	ANDI           	0xff
	MOVAR          	_ADC_init_#T20818_56		; Bank 1
	MOVRA          	_ADC_init_#T20813_56+0x1		; Bank 1
	ANDI           	0x0
	MOVAR          	_ADC_init_#T20818_56+0x1		; Bank 1
;  205:(    JNEQ_2,    #T20817 ,    #T20818 ,   #L20799)

; ITemplate_JNEQ1_4
	MOVRA          	_ADC_init_#T20818_56		; Bank 1
	SECTION        	0x1
	XOR            	(_ADC_init_#T20817_56) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21434
	MOV            	(_ADC_init_#T20818_56+0x1) & 0X7F,	0x0		; Bank 1
	XOR            	(_ADC_init_#T20817_56+0x1) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
#L21434
	GOTO           	#L20799
; 		{
#line 207	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 			offset_value =  offset_value & 0x00FF;
;  207:(    BAND_2,        255 , offset_value ,offset_value)

; ITemplate_BAND1_4
	MOV            	(_offset_value) & 0X7F,	0x0		; Bank 1
	ANDI           	0xff
	MOVA           	(_offset_value) & 0X7F		; Bank 1
	MOV            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	ANDI           	0x0
	MOVA           	(_offset_value+0x1) & 0X7F		; Bank 1
#line 209	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 			break;
;  209:(       JMP,            ,            ,   #L20781)

; ITemplate_JMP
	GOTO           	#L20781
; 		}
#line 211	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		else
;  211:(     LABEL,    #L20799 ,            ,          )

; ITemplate_LABEL
#L20799
; 		{
#line 213	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		    cnt--;
;  213:(     SUB_1,        cnt ,          1 ,       cnt)

; ITemplate_DEC_1_TMP
	DEC            	(_ADC_init_cnt_55) & 0X7F		; Bank 1
#line 215	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 			if(cnt == 0)
;  215:(     JNZ_1,        cnt ,            ,   #L20779)

; ITemplate_JNZ1_4
	MOV            	(_ADC_init_cnt_55) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L20779
#line 216	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 			    offset_value = 0;    //读IAP超过3次后仍不满足高低8位取反则offset固定为0
;  216:(    ASGN_2,          0 ,            ,offset_value)

; ITemplate_CLR1_4_TMP
	CLR            	(_offset_value) & 0X7F		; Bank 1
	CLR            	(_offset_value+0x1) & 0X7F		; Bank 1
; 		}
#line 218	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	}
;  218:(       JMP,            ,            ,   #L20779)

; ITemplate_JMP
	GOTO           	#L20779
;  218:(     LABEL,    #L20781 ,            ,          )

; ITemplate_LABEL
#L20781
#line 219	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ANSH1 = 0;          //选择AIN9为模拟口
;  219:(    ASGN_0,          0 ,            ,     ANSH1)

; ITemplate_CLR_0_TMP
	BCC            	(_ANSH1_0)/8,	(_ANSH1_0)%8
#line 220	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ADCCL |= 0xF0;      //ADCCL<7:4>选择通道
;  220:(     BOR_1,        240 ,      ADCCL ,     ADCCL)

; ITemplate_BOR1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	IORI           	0xf0
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 221	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ADCCL &= 0x9F;      //选择通道9
;  221:(    BAND_1,        159 ,      ADCCL ,     ADCCL)

; ITemplate_BAND1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	ANDI           	0x9f
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 223	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	ADCCM = 0x6B;       //参考源内部固定选择2.048V,负参考固定选择VSS，转换位数固定选择12位，AD调整offset固定选择档位1
;  223:(    ASGN_1,        107 ,            ,     ADCCM)

; ITemplate_ASGN1_4_R
	MOVI           	0x6b
	MOVA           	_ADCCM_0#sh		; ShBank 0
#line 224	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     ADCCH = 0xC8;       //低位对齐;时钟周期FOSC/16
;  224:(    ASGN_1,        200 ,            ,     ADCCH)

; ITemplate_ASGN1_4_R
	MOVI           	0xc8
	MOVA           	_ADCCH_0#sh		; ShBank 0
#line 225	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	ADEN = 1;           //使能ADC模块
;  225:(    ASGN_0,          1 ,            ,      ADEN)

; ITemplate_SET_0_TMP
	BSS            	(_ADEN_0#sh)/8,	(_ADEN_0#sh)%8		; ShBank 0
#line 226	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     VREFEN = 1;         //参考电压模块使能
;  226:(    ASGN_0,          1 ,            ,    VREFEN)

; ITemplate_SET_0_TMP
	BSS            	(_VREFEN_0#sh)/8,	(_VREFEN_0#sh)%8		; ShBank 0
#line 227	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	while(j--);         //等待300us以上
;  227:(     LABEL,    #L20905 ,            ,          )

; ITemplate_LABEL
#L20905
;  227:(    ASGN_2,          j ,            ,   #T20910)

; ITemplate_ASGN1_4_R
	MOV            	(_ADC_init_j_55+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20910_55+0x1) & 0X7F		; Bank 1
	MOV            	(_ADC_init_j_55) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20910_55) & 0X7F		; Bank 1
;  227:(     SUB_2,          j ,          1 ,         j)

; ITemplate_DEC_2_TMP
	MOV            	(_ADC_init_j_55) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21435
	DEC            	(_ADC_init_j_55+0x1) & 0X7F		; Bank 1
#L21435
	DEC            	(_ADC_init_j_55) & 0X7F		; Bank 1
;  227:(     JNZ_2,    #T20910 ,            ,   #L20905)

; ITemplate_JNZ1_4
	MOV            	(_ADC_init_#T20910_55) & 0X7F,	0x0		; Bank 1
	IOR            	(_ADC_init_#T20910_55+0x1) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L20905
#line 228	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	VREF_CHOPEN = 1;    //内部参考必须使能电压斩波器
;  228:(    ASGN_0,          1 ,            ,VREF_CHOPEN)

; ITemplate_SET_0_TMP
	BSS            	(_VREF_CHOPEN_0#sh)/8,	(_VREF_CHOPEN_0#sh)%8		; ShBank 0
#line 229	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     while(i--);         //等待1ms以上再启动转换
;  229:(     LABEL,    #L20928 ,            ,          )

; ITemplate_LABEL
#L20928
;  229:(    ASGN_2,          i ,            ,   #T20933)

; ITemplate_ASGN1_4_R
	MOV            	(_ADC_init_i_55+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20933_55+0x1) & 0X7F		; Bank 1
	MOV            	(_ADC_init_i_55) & 0X7F,	0x0		; Bank 1
	MOVA           	(_ADC_init_#T20933_55) & 0X7F		; Bank 1
;  229:(     SUB_2,          i ,          1 ,         i)

; ITemplate_DEC_2_TMP
	MOV            	(_ADC_init_i_55) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21436
	DEC            	(_ADC_init_i_55+0x1) & 0X7F		; Bank 1
#L21436
	DEC            	(_ADC_init_i_55) & 0X7F		; Bank 1
;  229:(     JNZ_2,    #T20933 ,            ,   #L20928)

; ITemplate_JNZ1_4
	MOV            	(_ADC_init_#T20933_55) & 0X7F,	0x0		; Bank 1
	IOR            	(_ADC_init_#T20933_55+0x1) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L20928
; #endif
#line 231	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	ADC_LP_EN = 1;      //ADC低功耗必须固定使能
;  231:(    ASGN_0,          1 ,            , ADC_LP_EN)

; ITemplate_SET_0_TMP
	BSS            	(_ADC_LP_EN_0)/8,	(_ADC_LP_EN_0)%8
#line 232	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	PBT4 = 1;
;  232:(    ASGN_0,          1 ,            ,      PBT4)

; ITemplate_SET_0_TMP
	BSS            	(_PBT4_0)/8,	(_PBT4_0)%8
#line 233	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 	PBT2 = 1;
;  233:(    ASGN_0,          1 ,            ,      PBT2)

; ITemplate_SET_0_TMP
	BSS            	(_PBT2_0)/8,	(_PBT2_0)%8
#line 234	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ;     SMPS = 1;           //硬件控制采样，ADTRG=1时启动AD采样转换
;  234:(    ASGN_0,          1 ,            ,      SMPS)

; ITemplate_SET_0_TMP
	BSS            	(_SMPS_0#sh)/8,	(_SMPS_0#sh)%8		; ShBank 0
#line 235	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; }
;  235:(       RET,            ,            ,          )

; ITemplate_RET
	SECTION        	0x0
	RET            			; Bank 0		; ShBank 0
	_DESC          	Get_ADC_Val,0X10,0X0,ADC_convert,Get_Tempture

SECTION1Get_ADC_Val	UNINTIAL       	0		; Bank 0
	ORG            	0XB7		; Bank 0
_Get_ADC_ValDATA	RSEG           	0X8		; Bank 0
Get_ADC_Val#	CSEG           
_Get_ADC_Val
; void _f(char* num,char len)
; {
;     int a[10];
; 	int n;  //存放数组a中元素的个数
;     int i;  //比较的轮数
;     int j;  //每轮比较的次数
;     int buf;  //交换数据时用于存放中间数据
;    // n = sizeof(a) / sizeof(a[0]);  /*a[0]是int型, 占4字节, 所以总的字节数除以4等于元素的个数*/
;    int ii;
;     for(ii=0;ii<len;ii++){
; 		a[ii] = *(num+ii);
; 	}
; 	n=len;
; 	for (i=0; i<n-1; ++i)  //比较n-1轮
;     {
;         for (j=0; j<n-1-i; ++j)  //每轮比较n-1-i次,
;         {
;             if (a[j] < a[j+1])
;             {
;                 buf = a[j];
;                 a[j] = a[j+1];
;                 a[j+1] = buf;
;             }
;         }
;     }
;       //  printf("%d\x20", a[i]);
; }
; void Get_ADC_Val(){
; 		unsigned int vcc_adc_val[10];
; 		unsigned int i;
#line 268	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		ADCCL |= 0xF0;      //ADCCL<7:4>选择通道
	CLR            	BKSR
;  268:(     BOR_1,        240 ,      ADCCL ,     ADCCL)

; ITemplate_BOR1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	IORI           	0xf0
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 269	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		ADCCL &= 0x4F;      //选择通道4
;  269:(    BAND_1,         79 ,      ADCCL ,     ADCCL)

; ITemplate_BAND1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	ANDI           	0x4f
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 273	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		adc_value = ADC_convert();
;  273:(     CALLR, (ADC_convert.0) ,            , adc_value)

; ITemplate_CALL
	SEGMENTSEL     	_ADC_convert
	CALL           	_ADC_convert		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_adc_value		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_adc_value+0x1		; Bank 1
#line 274	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		if(adc_value > offset_value)   //AD转换值大于offset值则减去offset，否则ADC结果归0
;  274:(    JLE_2U,  adc_value , offset_value ,   #L21270)

; ITemplate_JLE1_4U
	MOVRA          	_adc_value+0x1		; Bank 1
	SECTION        	0x1
	SUB            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21437
	MOV            	(_adc_value) & 0X7F,	0x0		; Bank 1
	SUB            	(_offset_value) & 0X7F,	0x0		; Bank 1
#L21437
	JBC            	PSW,	0x0
	GOTO           	#L21270
#line 275	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		    adc_value -= offset_value;
;  275:(     SUB_2,  adc_value , offset_value , adc_value)

; ITemplate_SUB1_4
	MOV            	(_offset_value) & 0X7F,	0x0		; Bank 1
	SUB            	(_adc_value) & 0X7F,	0x0		; Bank 1
	MOVA           	(_adc_value) & 0X7F		; Bank 1
	MOV            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	SUBC           	(_adc_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_adc_value+0x1) & 0X7F		; Bank 1
;  275:(       JMP,            ,            ,   #L21268)

; ITemplate_JMP
	GOTO           	#L21268
#line 276	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		else
;  276:(     LABEL,    #L21270 ,            ,          )

; ITemplate_LABEL
#L21270
#line 277	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		    adc_value = 0;
;  277:(    ASGN_2,          0 ,            , adc_value)

; ITemplate_CLR1_4_TMP
	CLR            	(_adc_value) & 0X7F		; Bank 1
	CLR            	(_adc_value+0x1) & 0X7F		; Bank 1
;  277:(     LABEL,    #L21268 ,            ,          )

; ITemplate_LABEL
#L21268
; 		////for( i=0;i<10;i++){
; 			//vcc_adc_val[i] = ADC_convert();
; 				//if(vcc_adc_val[i] > offset_value)   //AD转换值大于offset值则减去offset，否则ADC结果归0
; 					//vcc_adc_val[i] -= offset_value;
; 				//else 
; 					//vcc_adc_val[i] = 0;
; 		//}
; 		//_f(&vcc_adc_val[0],10);
; 		//电量值
#line 289	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		vcc_val=4*2.048*adc_value/4096;
;  289:(    CVUI_F,  adc_value ,            ,   #T21306)

; ITemplate_LibFunc1
	MOV            	(_adc_value) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP		; Bank 0
	MOV            	(_adc_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x1		; Bank 0
	SEGMENTSEL     	W2FL
	SECTION        	0x0
	CALL           	W2FL		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21306_66		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21306_66+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21306_66+0x2		; Bank 1
;  289:(     MUL_F,    #T21306 ,   8.192000 ,   #T21307)

; ITemplate_LibFunc3
	MOVI           	0x41
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x3
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVI           	0x12
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21306_66+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21306_66+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21306_66		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	FLMUL
	CALL           	FLMUL		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_CVF_D_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21307_66+0x1		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21307_66+0x2		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21307_66+0x3		; Bank 1
	SECTION        	0x1
	CLR            	(_Get_ADC_Val_#T21307_66) & 0X7F		; Bank 1
;  289:(     DIV_D,    #T21307 , 4096.000000 ,   vcc_val)

; ITemplate_LibFunc3
	MOVI           	0x45
	MOVAR          	?_TMP+0x7		; Bank 0
	MOVI           	0x80
	MOVAR          	?_TMP+0x6		; Bank 0
	MOVI           	0x0
	MOVAR          	?_TMP+0x5		; Bank 0
	MOVI           	0x0
	MOVAR          	?_TMP+0x4		; Bank 0
	MOV            	(_Get_ADC_Val_#T21307_66+0x3) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x3		; Bank 0
	MOV            	(_Get_ADC_Val_#T21307_66+0x2) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x2		; Bank 0
	MOV            	(_Get_ADC_Val_#T21307_66+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x1		; Bank 0
	MOV            	(_Get_ADC_Val_#T21307_66) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP		; Bank 0
	SEGMENTSEL     	DLDIV
	SECTION        	0x0
	CALL           	DLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_CVD_F_RET
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_vcc_val		; Bank 2
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_vcc_val+0x1		; Bank 2
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_vcc_val+0x2		; Bank 2
; 		//if(vcc_val>4.15) vcc_val=4.15;
; 		//if(vcc_val<3.6) vcc_val=3.6;
#line 292	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		Vbat_val=(vcc_val-3.6)*100/(4.15-3.6);
;  292:(     CVF_D,    vcc_val ,            ,   #T21326)

; ITemplate_CVF_D
	MOVRA          	_vcc_val		; Bank 2
	MOVAR          	_Get_ADC_Val_#T21326_66+0x1		; Bank 1
	MOVRA          	_vcc_val+0x1		; Bank 2
	MOVAR          	_Get_ADC_Val_#T21326_66+0x2		; Bank 1
	MOVRA          	_vcc_val+0x2		; Bank 2
	MOVAR          	_Get_ADC_Val_#T21326_66+0x3		; Bank 1
	SECTION        	0x1
	CLR            	(_Get_ADC_Val_#T21326_66) & 0X7F		; Bank 1
;  292:(     SUB_D,    #T21326 ,   3.600000 ,   #T21327)

; ITemplate_LibFunc3
	MOVI           	0x40
	MOVAR          	?_TMP+0x7		; Bank 0
	MOVI           	0x66
	MOVAR          	?_TMP+0x6		; Bank 0
	MOVI           	0x66
	MOVAR          	?_TMP+0x5		; Bank 0
	MOVI           	0x66
	MOVAR          	?_TMP+0x4		; Bank 0
	MOV            	(_Get_ADC_Val_#T21326_66+0x3) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x3		; Bank 0
	MOV            	(_Get_ADC_Val_#T21326_66+0x2) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x2		; Bank 0
	MOV            	(_Get_ADC_Val_#T21326_66+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP+0x1		; Bank 0
	MOV            	(_Get_ADC_Val_#T21326_66) & 0X7F,	0x0		; Bank 1
	MOVAR          	?_TMP		; Bank 0
	SEGMENTSEL     	DLSUB
	SECTION        	0x0
	CALL           	DLSUB		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21327_66		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21327_66+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21327_66+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21327_66+0x3		; Bank 1
;  292:(     MUL_D,    #T21327 , 100.000000 ,   #T21330)

; ITemplate_LibFunc3
	MOVI           	0x42
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0xc8
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0x0
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21327_66+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21327_66+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21327_66+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21327_66		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLMUL
	CALL           	DLMUL		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21330_66		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21330_66+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21330_66+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21330_66+0x3		; Bank 1
;  292:(     DIV_D,    #T21330 ,   0.550000 ,   #T21337)

; ITemplate_LibFunc3
	MOVI           	0x3f
	MOVA           	(?_TMP+0x7) & 0X7F		; Bank 0
	MOVI           	0xc
	MOVA           	(?_TMP+0x6) & 0X7F		; Bank 0
	MOVI           	0xcc
	MOVA           	(?_TMP+0x5) & 0X7F		; Bank 0
	MOVI           	0xd0
	MOVA           	(?_TMP+0x4) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21330_66+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21330_66+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21330_66+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21330_66		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	DLDIV
	CALL           	DLDIV		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; ITemplate_ASGN_RET
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21337_66		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21337_66+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21337_66+0x2		; Bank 1
	MOV            	(?_TMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21337_66+0x3		; Bank 1
;  292:(    CVD_UC,    #T21337 ,            ,  Vbat_val)

; ITemplate_LibFunc1
	MOVRA          	_Get_ADC_Val_#T21337_66		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21337_66+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21337_66+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21337_66+0x3		; Bank 1
	MOVA           	(?_TMP+0x3) & 0X7F		; Bank 0
	SEGMENTSEL     	DL2LG
	CALL           	DL2LG		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Vbat_val		; Bank 1
#line 294	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		if(Vbat_val>99) Vbat_val=99;
;  294:(    JLE_1U,   Vbat_val ,         99 ,   #L21341)

; ITemplate_JLE1_4U
	MOVRA          	_Vbat_val		; Bank 1
	SUBI           	0x63
	JBC            	PSW,	0x0
	GOTO           	#L21341
;  294:(    ASGN_1,         99 ,            ,  Vbat_val)

; ITemplate_ASGN1_4_R
	MOVI           	0x63
	SECTION        	0x1
	MOVA           	(_Vbat_val) & 0X7F		; Bank 1
;  294:(     LABEL,    #L21341 ,            ,          )

; ITemplate_LABEL
#L21341
; 		if(Vbat_val<0) Vbat_val=0;
#line 298	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		ADCCL |= 0xF0;      //ADCCL<7:4>选择通道
;  298:(     BOR_1,        240 ,      ADCCL ,     ADCCL)

; ITemplate_BOR1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	IORI           	0xf0
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 299	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		ADCCL &= 0x9F;		//选择通道9
;  299:(    BAND_1,        159 ,      ADCCL ,     ADCCL)

; ITemplate_BAND1_4
	MOV            	_ADCCL_0#sh,	0x0		; ShBank 0
	ANDI           	0x9f
	MOVA           	_ADCCL_0#sh		; ShBank 0
#line 300	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		adc_value = ADC_convert();
;  300:(     CALLR, (ADC_convert.0) ,            , adc_value)

; ITemplate_CALL
	SEGMENTSEL     	_ADC_convert
	CALL           	_ADC_convert		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_adc_value		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_adc_value+0x1		; Bank 1
#line 301	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		if(adc_value > offset_value)   //AD转换值大于offset值则减去offset，否则ADC结果归0
;  301:(    JLE_2U,  adc_value , offset_value ,   #L21396)

; ITemplate_JLE1_4U
	MOVRA          	_adc_value+0x1		; Bank 1
	SECTION        	0x1
	SUB            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21438
	MOV            	(_adc_value) & 0X7F,	0x0		; Bank 1
	SUB            	(_offset_value) & 0X7F,	0x0		; Bank 1
#L21438
	JBC            	PSW,	0x0
	GOTO           	#L21396
#line 302	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		    adc_value -= offset_value;
;  302:(     SUB_2,  adc_value , offset_value , adc_value)

; ITemplate_SUB1_4
	MOV            	(_offset_value) & 0X7F,	0x0		; Bank 1
	SUB            	(_adc_value) & 0X7F,	0x0		; Bank 1
	MOVA           	(_adc_value) & 0X7F		; Bank 1
	MOV            	(_offset_value+0x1) & 0X7F,	0x0		; Bank 1
	SUBC           	(_adc_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_adc_value+0x1) & 0X7F		; Bank 1
;  302:(       JMP,            ,            ,   #L21394)

; ITemplate_JMP
	GOTO           	#L21394
#line 303	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		else
;  303:(     LABEL,    #L21396 ,            ,          )

; ITemplate_LABEL
#L21396
#line 304	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		    adc_value = 0;
;  304:(    ASGN_2,          0 ,            , adc_value)

; ITemplate_CLR1_4_TMP
	CLR            	(_adc_value) & 0X7F		; Bank 1
	CLR            	(_adc_value+0x1) & 0X7F		; Bank 1
;  304:(     LABEL,    #L21394 ,            ,          )

; ITemplate_LABEL
#L21394
; 			//temperature=adc_value/1000*10+(adc_value/100)%10;
#line 307	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; 		temperature=Get_Tempture(adc_value);
;  307:(    PARA_2,  adc_value ,            ,       adc)

; ITemplate_ASGN1_4
	MOV            	(_adc_value) & 0X7F,	0x0		; Bank 1
	MOVA           	(_Get_TemptureDATA+0X0) & 0X7F		; Bank 1
	MOV            	(_adc_value+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_Get_TemptureDATA+0X0+0x1) & 0X7F		; Bank 1
;  307:(     CALLR, (Get_Tempture.0) ,            ,   #T21416)

; ITemplate_CALL
	SEGMENTSEL     	_Get_Tempture
	CALL           	_Get_Tempture		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_Get_ADC_Val_#T21416_66		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21416_66+0x1		; Bank 1
	MOV            	(?_TMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVAR          	_Get_ADC_Val_#T21416_66+0x2		; Bank 1
;  307:(    CVF_UC,    #T21416 ,            ,temperature)

; ITemplate_LibFunc1
	MOVRA          	_Get_ADC_Val_#T21416_66		; Bank 1
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21416_66+0x1		; Bank 1
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
	MOVRA          	_Get_ADC_Val_#T21416_66+0x2		; Bank 1
	MOVA           	(?_TMP+0x2) & 0X7F		; Bank 0
	SEGMENTSEL     	FL2LG
	CALL           	FL2LG		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_temperature		; Bank 1
#line 308	C:\Users\king\Desktop\Mixing_cup\搅拌杯程序\user_code\HRCC Project Application1\HRCC Project Application1\Src_user\user_function.c ; }
;  308:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC80	PSECT	FLAG=0X1088,ADDR=0X7FC69
_ANSH1_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC81	PSECT	FLAG=0X1088,ADDR=0X7FCA0
_DATARDTRG_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC82	PSECT	FLAG=0X1088,ADDR=0X7FCA7
_DATARDEN_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC83	PSECT	FLAG=0X1088,ADDR=0X7FCB7
_GIE_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC84	PSECT	FLAG=0X1088,ADDR=0X7FCD0
_ADIF_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC85	PSECT	FLAG=0X1088,ADDR=0X7FD72
_PBT2_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC86	PSECT	FLAG=0X1088,ADDR=0X7FD74
_PBT4_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC87	PSECT	FLAG=0X1088,ADDR=0X7FDD5
_ADC_LP_EN_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC88	PSECT	FLAG=0X1088,ADDR=0X7FDDF
_UART1SEL_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC89	PSECT	FLAG=0X1088,ADDR=0X305D0
_ADEN_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC90	PSECT	FLAG=0X1088,ADDR=0X305D1
_ADTRG_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC91	PSECT	FLAG=0X1088,ADDR=0X305D2
_SMPS_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC92	PSECT	FLAG=0X1088,ADDR=0X305D8
_VREFEN_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC93	PSECT	FLAG=0X1088,ADDR=0X305D9
_VREF_CHOPEN_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC94	PSECT	FLAG=0X1088,ADDR=0X306B9
_TRMT1_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC95	PSECT	FLAG=0X1088,ADDR=0X306BD
_BRGH1_0	RSEG           	0X1		; Bank 0

SECTION8C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC96	PSECT	FLAG=0X1088,ADDR=0X306BE
_TX1LEN_0	RSEG           	0X1		; Bank 0

SECTION1IC__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c98	IDATA          		0X83		; Bank 0
_offset_value	DB             	0X0,0XE4,0X0,0XE4		; Bank 0

SECTION1IC__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c100	IDATA          		0X9C		; Bank 0
_str	DB             	0XCD,0XE4,0XA8,0XE4,0XB5,0XE4,0XC0,0XE4,0X20,0XE4,0XB5,0XE4,0XC4,0XE4,0XD7,0XE4,0XAA,0XE4,0XBB,0XE4
	DB		0XBB,0XE4,0XD6,0XE4,0XB5,0XE4,0XCE,0XE4,0XAA,0XE4,0X3A,0XE4,0X20,0XE4,0X20,0XE4,0X20,0XE4,0X20,0XE4
	DB		0XD,0XE4,0XA,0XE4,0X0,0XE4		; Bank 0

SECTION0C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC101	PSECT	FLAG=0x88
_GetOffset2048_#T20657_47	RSEG           	0X1		; Bank 0

SECTION0C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC102	PSECT	FLAG=0x88
_GetOffsetVDD_#T20740_50	RSEG           	0X1		; Bank 0

SECTION1C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0XF8		; Bank 0
_adc_value	RSEG           	0X2		; Bank 0

SECTION2C__Users_king_Desktop_Mixing_cup_搅拌杯程序_user_code_HRCC_Project_Application1_HRCC_Project_Application1_Src_user_user_function_c_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0X10D		; Bank 0
_vcc_val	RSEG           	0X3		; Bank 0
	ORG            	0X107		; Bank 0
_RV	RSEG           	0X3		; Bank 0
	ORG            	0X104		; Bank 0
_RT	RSEG           	0X3		; Bank 0
	ORG            	0X10A		; Bank 0
_Tmp	RSEG           	0X3		; Bank 0

SECTION8C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_122_tools_INCLUDE_ES7P0693_h_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0XFF90		; Bank 0
_FRAL_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF91		; Bank 0
_FRAH_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF92		; Bank 0
_ROMDL_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF93		; Bank 0
_ROMDH_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF94		; Bank 0
_ROMCL_0	RSEG           	0X1		; Bank 0
	ORG            	0X60B7		; Bank 0
_ADCCM_0	RSEG           	0X1		; Bank 0
	ORG            	0X60B8		; Bank 0
_ADCRL_0	RSEG           	0X1		; Bank 0
	ORG            	0X60B9		; Bank 0
_ADCRH_0	RSEG           	0X1		; Bank 0
	ORG            	0X60BA		; Bank 0
_ADCCL_0	RSEG           	0X1		; Bank 0
	ORG            	0X60BB		; Bank 0
_ADCCH_0	RSEG           	0X1		; Bank 0
	ORG            	0X60D6		; Bank 0
_TX1B_0	RSEG           	0X1		; Bank 0
	ORG            	0X60D8		; Bank 0
_BR1R_0	RSEG           	0X1		; Bank 0
	END
